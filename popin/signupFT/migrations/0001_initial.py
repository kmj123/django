# Generated by Django 5.2.1 on 2025-07-04 03:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('idols', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.CharField(max_length=50, unique=True, verbose_name='사용자 ID')),
                ('name', models.CharField(max_length=100, verbose_name='이름')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='생년월일')),
                ('gender', models.CharField(blank=True, choices=[('M', '남성'), ('F', '여성')], max_length=1, null=True, verbose_name='성별')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='이메일')),
                ('reported_by', models.TextField(blank=True, default='', verbose_name='신고당한 횟수')),
                ('phone', models.CharField(blank=True, default='', max_length=20, verbose_name='전화번호')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='주소')),
                ('state', models.IntegerField(choices=[(0, '관리자'), (1, '일반 사용자'), (2, '숨김 사용자'), (3, '차단된 사용자')], default=1, verbose_name='사용자 상태')),
                ('manners_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='매너 온도')),
                ('nickname', models.CharField(max_length=100, unique=True, verbose_name='닉네임')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='프로필 이미지')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='가입일')),
                ('agree_marketing', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='최근 수정일')),
                ('bias_group', models.ManyToManyField(blank=True, related_name='fans_group', to='idols.group', verbose_name='최애 그룹')),
                ('bias_member', models.ManyToManyField(blank=True, related_name='fans_member', to='idols.member', verbose_name='최애 멤버')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자 목록',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation_type', models.CharField(choices=[('FOLLOW', '관심 사용자'), ('BLOCK', '차단한 사용자')], max_length=10, verbose_name='관계 유형')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_relations', to=settings.AUTH_USER_MODEL, verbose_name='관계 시작 사용자')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_relations', to=settings.AUTH_USER_MODEL, verbose_name='관계 대상 사용자')),
            ],
            options={
                'verbose_name': '사용자 관계',
                'verbose_name_plural': '사용자 관계 목록',
                'unique_together': {('from_user', 'to_user', 'relation_type')},
            },
        ),
    ]
